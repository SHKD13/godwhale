Puella α v1.0 リリースノート
　　　　　　　　　　　　　　　　　　2013-08-27 伊藤英紀

【改版履歴】
  2013-08-27 v1.0 初版


【目次】
１．概要
２．disclaimer および諸権利について
３．必要なもの
４．インストール方法、環境設定
５．使用法
６．連絡先


１．概要

本パッケージは、クラスタ並列将棋ソフト「Puella α」を収録しています。動作させるには本パッケージのほかに最低限、MPI (Message Passing Interface)環境と、別の公開将棋ソフトであるボナンザに含まれるファイルを必要とします。必要なツールはすべてネットから無料で入手できます。入手方法については後述します。


２．disclaimer、および諸権利について

本パッケージは無保証です。本パッケージを使用したことによるすべての結果・副作用等に関して作者は一切責任を持ちません。自己責任でご使用ください。

このドキュメント自体も、多くの人が読んでわかるように意図して書いてはいますが、製品のマニュアルのように完全な網羅的なものではありません。適宜関連する情報を参照する必要があるかと思います。Linuxのシステム管理についてはある程度の知識があることを想定しています。

本パッケージの著作権は、作者である私、伊藤英紀が保持します。ユーザは、個人的に、非営利目的に使うぶんには自由です（許諾なしに行ってかまいません）。組織で使う、もしくは商業目的で使う場合は作者に事前に相談ください。無断での組織による利用・商業利用は御遠慮ください。

本パッケージはボナンザのファイルを含んでいます。ボナンザのファイルについては、作者である保木邦仁さんに著作権があります。ボナンザの利用・再配布については、本パッケージに含まれているbonanza.txtの指示にしたがってください。ボナンザ由来のファイルは、bonanza.txt(元の名は src/client/readme.txt), bin/book.bin, および bns6 ディレクトリの下のbbini.c/convfv.cc/handjoseki.h/mate3.h以外のすべてのファイルです。ただしbns6 ディレクトリの下のファイルの中には、作者が改変していてオリジナルのボナンザと異なるものもあります。


３．必要なもの

本パッケージを使用する環境としては、主にx86-64 CPUを持つPC上のLinuxのクラスタ環境を想定しています。これ以外の環境でも動作可能かもしれませんが、作者が確認しているのは上記の環境だけです。特に、x86(32bit) CPUでは動かすぶんには問題ないはずです。

Linuxのディストリビューションは特に指定はないです。作者はふだん Ubuntu 12.04 を使っています。

MPI, SSH, およびコンパイラが必要となります。また、必須ではないですが、クラスタ環境で作業する場合、NFSがあると多くの場合便利になります。一般的なLinuxのディストリビューションにはこれらは入っているケースと入っていないケースがありますので、状況に応じて当該ソフトのインストールが必要となります。

クラスタ環境は特別高速なものは必要ではなく、普通のものでかまいません。100Mイーサなら十分です。マシンは同じ部屋にあるなら問題ないと思いますが、遠距離のマシンをつなげるような環境だと性能に影響あるかもしれません。ネットワークのレイテンシとしては、一応設計上は片道1ms程度を想定していました。作者は自宅内でPC3-4台をハブ経由で100Mイーサでつないでおり、pingでのround trip timeは0.1ms強です。


４．インストール方法、環境設定

以下の順に説明していきます。

 1) コンパイラのインストール
 2) SSHインストール／環境設定
 3) MPIインストール／環境設定
 4) NFSインストール／環境設定
 5) Puella αインストール

必ずしもこの順の通りに行う必要はありませんが、3)は1)と2)の後に行う必要があります。5)は3)の後に行う必要があります。

1)-4)は基本的に標準ツールでPuella αとは独立なものなので、ここでは詳しくは説明しません。もしこれらが既にインストール済みの環境を使う方（大学のクラスタを使える方等）は1)-4)は読み飛ばしてかまいません。以下では、作者が「私がやったときはこんな感じでできました」というのを簡単に書いておきます。詳細や正確な情報は、当該のドキュメントをご参照ください。ググってもいろいろ情報が出てきます。作者のブログの以下の記事でもインストールしたときのことを書いてますので、もしかしたら参考になるかもしれません（ならないかもしれませんが）。
http://aleag.cocolog-nifty.com/blog/2010/03/hpc-e16c.html
http://aleag.cocolog-nifty.com/blog/2010/04/ubuntu-64bit-d7.html


1) コンパイラのインストール

Puella αはCとC++混在で書かれています。C++コンパイラが必要になります。

まず、どのコンパイラを使うか、が問題になります。使いやすさの面ではgccがいちばん簡単です。ただクラスタ並列で使うというならおそらく最高性能を引き出したいことでしょう。性能優先だとIntel cc (icc)の方がベターです。作者が試したところでは、インテルCPU上ではiccの方がgccより２，３割程度速くなります。他のコンパイラ(Open64, PGI等)は作者は試したことがありません。

iccは本来有料の製品ですが、Linuxで非商用目的で使用する場合はNon-commercial versionという無料版が使えます。下のURLからダウンロードできます。作者は主にこれを使用しています（最新版ではないですが）。
http://software.intel.com/en-us/articles/non-commercial-software-development/

作者が使った旧版 のインストールでは、install.sh というスクリプトがあって、それを走らせるといろいろ質問を聞いてくるので答えていく、という感じでした。


2) SSHインストール／環境設定

SSHはクライアントおよびサーバ両方の環境が必要です。作者が試したUbuntuの環境では、クライアントは標準で入ってましたがSSHサーバは別途インストールが必要でした。といっても Ubuntu なら
 % sudo apt-get install openssh-server 
とやるだけでしたが。

SSHのインストール方法および環境設定についても、当該のドキュメントを参照お願いします。Puella αでは「マスター」のノードと「スレーブ」のノードがありますが、マスターとスレーブ間は互いにパスワードなしでログインできるように環境設定しておく必要がある、とMPIのドキュメントに書いてあった気がするので、作者はそうしています。（本当に必要かは未確認。）スレーブどうしは通信しないのでSSH設定は必須ではありません。

マシンAからマシンBにパスワードなしでログインできるようにするのに作者がやったのは、

 1. マシンAで % ssh-keygen -t rsa とする -> ‾/.ssh/id_rsa.pub ができる
 2. この id_rsa.pub をマシンBの ‾/.ssh/authorized_keys に追加する

だったと思います。(NFSでホームを共有してれば１回でよいはず？）


3) MPIインストール／環境設定

MPI環境は、標準のLinuxディストリビューションにはまず入っていないと思います。大学のクラスタ等で既にインストール済みの環境を使うのでなければ、インストール作業が必要でしょう。

フリーのMPI環境としては、現時点では openMPI がもっともポピュラーではないかと思います。作者はopenMPI 1.4.5 を使っています。1.6系も試したところ動きました。他にもMPICH2などが使えるかもしれません。

MPI環境はコンパイラと組み合わせて設定します。つまり、MPIの設定をするときに使用するコンパイラを決めます。gccを使うのであれば、Linuxディストリビューション標準のものがあるかもしれません。Ubuntuだとapt-getで取れるものがあるようです。

iccを使うなら、openMPIのビルド時に指定が必要です。

% ./configure CC=icc CXX=icpc
% make all
% sudo make install

という感じになると思います。

SSHでログインした後、環境変数PATHとLD_LIBRARY_PATHがMPIのディレクトリを含むように .bashrc なり .cshrc なりで設定しておく必要があります。（うろ覚えですが、たしか .bashrc/.cshrc と .login/.profile 両方設定必要だったような記憶があります。）openmpiですと、ログインした後 "which orted" とやってパスが見える必要があります。


4) NFSインストール／環境設定

これはLinux付属のものでよいでしょう。Ubuntuだと

% sudo apt-get install nfs-common nfs-kernel-server

くらいでよかったと思います。
設定としては、サーバ側で見せたいファイルを /etc/exports に次のような行を追加することで指定します：

/path/name/to/dir 192.168.xx.yy(rw,no_root_squash,async)

"192.68..."のところはIPアドレスでも(/etc/hosts等にある)マシン名でもかまいません。
/etc/exportsを編集しただけでは変更は反映されないので、この後いったんリブートするか、あるいは "% sudo exportfs -a"などとする必要があります。

クライアント側では、マウント先のディレクトリを（通常 /mnt/ の下に）あらかじめ作っておきます。空のディレクトリでかまいません。/etc/fstab に次のような行を追加します：

host1:/path/name/to/dir      /mnt/host1data       nfs     rw,noauto 0 0

こうしておいて % sudo mount /mnt/host1data などとするとマウントされて見えるようになります。


5) Puella αインストール／環境設定

実行するにはボナンザのファイルが必要です。ボナンザ(6.0)は以下のURLからダウンロードできます：
http://www.geocities.jp/bonanza_shogi/

この中の、winbin/ の下にある fv.bin が必要になります。

5-0) ソースをどこかに展開する。以下、展開したディレクトリを $PUELLA_A とする。

5-1) $PUELLA_A で "initdir.sh" を実行。最初に１回やればOK。

5-2) コンパイルする。通常のコンパイルと、pgoを使うコンパイルがある。後者の方が
性能が高い。
 5-2-A) 通常のコンパイルは、makefile を適切に修正した後に make する。
 5-2-B) pgo は、pgo.sh を適切に修正した後に "bash pgo.sh" する。

いずれも $PUELLA_A で行う。makefile, bns6/Makefile, pgo.shの修正については各ファイルのコメントを参照してください。SSE4/AVXがあるかは、cat /proc/cpuinfo でわかります。

5-3) fv.bin を変換します。bns6/ に行き、convfv.ccを単体でコンパイル(g++ convfv.cc)して、fv.binをbns6/ の下に置いて（またはリンクを貼って）おきます。それから
./a.out
としてください。fv3.binができますので、これを$PUELLA_Aに置いてください。

5-4) 必須ではありませんが性能追求するなら、hyper threadingはBIOSでオフにしてください。


５．使用法

Puella αの実行は、MPI-2標準にあるmpiexecコマンドを用います。MPIでいうランク0のプロセスがマスターになり、残りはスレーブになります。shogi-serverに接続して対戦する場合の呼び出しだと、以下のようなファイル("cmdfile"とする)を用意しておき、"source cmdfile" とします。

---- cmdfileの中身 ----
TMP=/tmp/bkrcmd

echo 'beep off'  > $TMP
echo 'resign 32599' >> $TMP
echo 'connect localhost 4081 bkr4 bkr4-480-0,mytrip 1' >> $TMP

mpiexec -host localhost -n 1 gmx -tq -y0 -h0 -a -m0 : ¥
        -host localhost -n 1 gmx         -h3 -a -s1 -5 : ¥ 
        -host slave2    -n 1 gmx         -h3 -a -s0 -6   ¥ 
         < $TMP
---------

この例では、６コアマシンが２台あり、片方のコア0がマスター、コア1-5がスレーブ１番、もう片方のコア0-5がスレーブ２番になります。


Puella α('gmx')のコマンド引数について説明します。

-a : cpu affinity(コア固定)機能をイネーブルします

-m[0-9] : マスターに使い、マスターの走るコアを指定します。-aと共に使います。
　　　　　スレーブでは使用禁止。

-s[0-9] : スレーブに使い、スレーブのスレッド0の走るコアを指定します。-aと共に使います。
　　　　　マスターでは使用禁止。

-[2-9] : スレーブに使い、スレーブのスレッド数を指定します。
　　　　デフォルトは1です。-a 及び -s[0-9] と共に使用すると、続き番号の
　　　　コアが各スレッドに割り振られます。たとえば "-s2 -4" とすると、
　　　　スレッド 0,1,2,3 がそれぞれコア 2,3,4,5 で走ります。
　　　　続き番号以外のコアの指定はできません。

-t[zqfclhx] : マスターに使い、持ち時間を指定します。左(z)から0/8/15/25/30/60/180分。

-y[0136] : マスターに使い、秒読みを指定します。左(0)から0/10/30/60秒。

-h[0-9] : ハッシュサイズを指定します。-hNなら2^(20+N)エントリになります。
　　　　　マスターではハッシュは使わないので-h0がよいです。

なお -host, -n 等のオプションはmpiexecコマンドのものです。これらについてはMPIのドキュメントを参照ください。-hostは走るホスト、-nはプロセス数です。プロセス数とスレッド数の違いにご注意ください。あるホストで、４スレッドで走るスレーブを１プロセス走らせるなら、 "-n 1 gmx -4" となります。

各マシン上での実行ディレクトリは、特に指定しなければ呼び出し元のカレントディレクトリと同じになるはずです。mpiexecコマンドで指定することも可能ですが、各マシンで同じパス名のディレクトリを用意しておく（あるいはNFS共有する）のが簡単でしょう。fv3.bin, book.binも各マシンで必要です。

Puella αのコマンドファイルは、フォーマットはボナンザのものと同じですが、ボナンザの多くのコマンドはPuella αでは無効です。作者が使っているのは beep, resign, connect, problem くらいです。limit, hashは効きません。

現状、使い方としてはほぼshogi-serverでの対局に特化しています。GUI等はありません。floodgateでしたらfloodgateの観戦クライアントで観戦できると思います。他のGUIクライアント等を使ってshogi-server経由でPuella αと対局することも可能と思います。
shogi-serverは
http://shogi-server.sourceforge.jp
から入手し、使用法を理解しておいてください。たしかruby 1.8.7 が必要になると思います。

６．連絡先

使用レポート、バグ報告、要望、等々歓迎致します。
作者のブログ
http://aleag.cocolog-nifty.com
にコメントを残してください。
必ず返信／対応できるとは限りませんが、事情の許すかぎり対応したいと考えております。クラスタ並列は何かと面倒だしハマりやすい部分が多いことは確かなので、特に最初のうちは質問がかなり出るだろうと予想しています。


